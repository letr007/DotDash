name: Release

on:
  push:
    tags:
      - "v*"  # 当推送标签以 "v" 开头时触发（例如 v1.0.0）

jobs:
  build-ubuntu:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Add target
        run: rustup target add x86_64-unknown-linux-gnu

      - name: Build project
        run: cargo build --release --target x86_64-unknown-linux-gnu

      - name: Install cargo-deb
        run: cargo install cargo-deb

      - name: Generate .deb package
        run: cargo deb --target x86_64-unknown-linux-gnu --no-build

      - name: Upload .deb artifact
        uses: actions/upload-artifact@v4
        with:
          name: ubuntu-deb-binaries
          path: target/x86_64-unknown-linux-gnu/debian/*.deb

  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Add target
        run: rustup target add x86_64-pc-windows-msvc

      - name: Build project
        run: cargo build --release --target x86_64-pc-windows-msvc

      - name: Upload .exe artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-exe-binaries
          path: target/x86_64-pc-windows-msvc/release/*.exe

  create-release:
    needs: [build-ubuntu, build-windows]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get version
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}  # 获取标签中的版本号
          echo "Version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Download .deb artifact
        uses: actions/download-artifact@v4
        with:
          name: ubuntu-deb-binaries
          path: artifacts

      - name: Download .exe artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-exe-binaries
          path: artifacts

      - name: List artifact contents
        run: |
          ls -al /home/runner/work/DotDash/DotDash/artifacts/ubuntu-deb-binaries
          ls -al /home/runner/work/DotDash/DotDash/artifacts/windows-exe-binaries

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.KEY }}
          tag_name: v${{ steps.get_version.outputs.version }}
          name: Release v${{ steps.get_version.outputs.version }}
          body: "v${{ steps.get_version.outputs.version }}"
          files: |
            /home/runner/work/DotDash/DotDash/artifacts/ubuntu-deb-binaries/*.deb
            /home/runner/work/DotDash/DotDash/artifacts/windows-exe-binaries/*.exe
